package si.pecan.upsert.repository

import jakarta.persistence.Column
import jakarta.persistence.EmbeddedId
import jakarta.persistence.Id
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate
import si.pecan.upsert.dialect.UpsertDialect
import si.pecan.upsert.model.UpsertModel
import java.lang.reflect.Field

/**
 * Abstract base class for JDBC-based upsert operations.
 * Provides common functionality for different database-specific implementations.
 */
class JdbcUpsertOperations(
    private val jdbcTemplate: NamedParameterJdbcTemplate,
    private val dialect: UpsertDialect,
    private  val upsertModel: UpsertModel
) : UpsertOperations {
    // Store entity class, ID class, and table name
    /**
     * Perform an upsert operation for the given entity.
     *
     * @param entity The entity to upsert
     * @param tableName The table name
     * @param <T> The entity type
     * @return The updated entity with any autogenerated fields
     */
    override fun <T : Any> upsert(entity: T, tableName: String): T {
        val results = upsertAll(listOf(entity), tableName)
        return if (results.isNotEmpty()) results[0] else entity
    }

    /**
     * Perform an upsert operation for the given entity with custom ON clause and ignored fields.
     *
     * @param entity The entity to upsert
     * @param tableName The table name
     * @param onFields The fields to use for the ON clause
     * @param ignoredFields The fields to ignore during updates
     * @param ignoreAllFields Whether to ignore all fields during updates
     * @param <T> The entity type
     * @return The updated entity with any autogenerated fields
     */
    override fun <T : Any> upsert(
        entity: T,
        tableName: String,
        onFields: List<String>,
        ignoredFields: List<String>,
        ignoreAllFields: Boolean
    ): T {
        val results = upsertAll(listOf(entity), tableName, onFields, ignoredFields, ignoreAllFields)
        return if (results.isNotEmpty()) results[0] else entity
    }

    /**
     * Perform an upsert operation for the given list of entities.
     *
     * @param entities The list of entities to upsert
     * @param tableName The table name
     * @param <T> The entity type
     * @return The list of updated entities with any autogenerated fields
     */
    override fun <T : Any> upsertAll(entities: List<T>, tableName: String): List<T> {
        if (entities.isEmpty()) {
            return emptyList()
        }

        val upsertInstance = upsertModel.createUpsertInstance()
        return dialect.upsertData(upsertInstance, entities, jdbcTemplate)
    }

    /**
     * Perform an upsert operation for the given list of entities with custom ON clause and ignored fields.
     *
     * @param entities The list of entities to upsert
     * @param tableName The table name
     * @param onFields The fields to use for the ON clause
     * @param ignoredFields The fields to ignore during updates
     * @param ignoreAllFields Whether to ignore all fields during updates
     * @param <T> The entity type
     * @return The list of updated entities with any autogenerated fields
     */
    override fun <T : Any> upsertAll(
        entities: List<T>,
        tableName: String,
        onFields: List<String>,
        ignoredFields: List<String>,
        ignoreAllFields: Boolean
    ): List<T> {
        if (entities.isEmpty()) {
            return emptyList()
        }

        val upsertInstance = upsertModel.createUpsertInstance(
            onFields,
            ignoreColumns = ignoredFields,
            ignoreAllFields = ignoreAllFields
        )
        return dialect.upsertData(upsertInstance, entities, jdbcTemplate)
    }
}
