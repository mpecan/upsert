package si.pecan.upsert.repository

import org.springframework.jdbc.core.JdbcTemplate
import si.pecan.upsert.dialect.MySqlUpsertDialect
import si.pecan.upsert.dialect.PostgreSqlUpsertDialect
import si.pecan.upsert.dialect.UpsertDialect
import si.pecan.upsert.model.UpsertModel

/**
 * Factory class for creating database-specific UpsertOperations implementations.
 * This class provides backward compatibility with existing code while allowing
 * for engine-specific optimizations.
 */
class JdbcUpsertOperations(
    jdbcTemplate: JdbcTemplate,
    dialect: UpsertDialect
) : UpsertOperations {

    // Delegate to the appropriate implementation based on the dialect
    private val delegate: UpsertOperations = when (dialect) {
        is PostgreSqlUpsertDialect -> PostgreSqlJdbcUpsertOperations(jdbcTemplate, dialect)
        is MySqlUpsertDialect -> MySqlJdbcUpsertOperations(jdbcTemplate, dialect)
        else -> {
            // For other dialects, use PostgreSQL if it supports optimized batch, otherwise MySQL
            if (dialect.supportsOptimizedBatch()) {
                PostgreSqlJdbcUpsertOperations(jdbcTemplate, dialect)
            } else {
                MySqlJdbcUpsertOperations(jdbcTemplate, dialect)
            }
        }
    }

    /**
     * Initialize the operations with entity class and ID class.
     * Delegates to the appropriate implementation based on the dialect.
     *
     * @param entityClass The entity class
     * @param idClass The ID class
     * @param tableName The table name
     */
    override fun initialize(upsertModel: UpsertModel) {
        delegate.initialize(upsertModel)
    }

    /**
     * Perform an upsert operation for the given entity.
     * Delegates to the appropriate implementation based on the dialect.
     *
     * @param entity The entity to upsert
     * @param tableName The table name
     * @param <T> The entity type
     * @return The updated entity with any autogenerated fields
     */
    override fun <T : Any> upsert(entity: T, tableName: String): T {
        return delegate.upsert(entity, tableName)
    }

    /**
     * Perform an upsert operation for the given list of entities.
     * Delegates to the appropriate implementation based on the dialect.
     *
     * @param entities The list of entities to upsert
     * @param tableName The table name
     * @param <T> The entity type
     * @return The list of updated entities with any autogenerated fields
     */
    override fun <T : Any> upsertAll(entities: List<T>, tableName: String): List<T> {
        return delegate.upsertAll(entities, tableName)
    }

    /**
     * Perform an upsert operation for the given entity with custom ON clause and ignored fields.
     * Delegates to the appropriate implementation based on the dialect.
     *
     * @param entity The entity to upsert
     * @param tableName The table name
     * @param onFields The fields to use for the ON clause
     * @param ignoredFields The fields to ignore during updates
     * @param ignoreAllFields Whether to ignore all fields during updates
     * @param <T> The entity type
     * @return The updated entity with any autogenerated fields
     */
    override fun <T : Any> upsert(
        entity: T,
        tableName: String,
        onFields: List<String>,
        ignoredFields: List<String>,
        ignoreAllFields: Boolean
    ): T {
        return delegate.upsert(entity, tableName, onFields, ignoredFields, ignoreAllFields)
    }

    /**
     * Perform an upsert operation for the given list of entities with custom ON clause and ignored fields.
     * Delegates to the appropriate implementation based on the dialect.
     *
     * @param entities The list of entities to upsert
     * @param tableName The table name
     * @param onFields The fields to use for the ON clause
     * @param ignoredFields The fields to ignore during updates
     * @param ignoreAllFields Whether to ignore all fields during updates
     * @param <T> The entity type
     * @return The list of updated entities with any autogenerated fields
     */
    override fun <T : Any> upsertAll(
        entities: List<T>,
        tableName: String,
        onFields: List<String>,
        ignoredFields: List<String>,
        ignoreAllFields: Boolean
    ): List<T> {
        return delegate.upsertAll(entities, tableName, onFields, ignoredFields, ignoreAllFields)
    }

    companion object {
        /**
         * Create a JdbcUpsertOperations instance for PostgreSQL.
         *
         * @param jdbcTemplate The JdbcTemplate to use
         * @return A new JdbcUpsertOperations instance for PostgreSQL
         */
        fun forPostgreSql(jdbcTemplate: JdbcTemplate): JdbcUpsertOperations {
            return JdbcUpsertOperations(jdbcTemplate, PostgreSqlUpsertDialect())
        }

        /**
         * Create a JdbcUpsertOperations instance for MySQL.
         *
         * @param jdbcTemplate The JdbcTemplate to use
         * @return A new JdbcUpsertOperations instance for MySQL
         */
        fun forMySql(jdbcTemplate: JdbcTemplate): JdbcUpsertOperations {
            return JdbcUpsertOperations(jdbcTemplate, MySqlUpsertDialect())
        }
    }
}
